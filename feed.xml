<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://wechaty.js.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wechaty.js.org/" rel="alternate" type="text/html" /><updated>2022-11-25T19:16:36+00:00</updated><id>https://wechaty.js.org/feed.xml</id><title type="html">Wechaty</title><subtitle>Conversational RPA SDK for Chatbot Makers</subtitle><entry><title type="html">基于 Wechaty 实现高校招生宣传小助手的实践</title><link href="https://wechaty.js.org/2022/09/27/wechaty-university-admission-helper/" rel="alternate" type="text/html" title="基于 Wechaty 实现高校招生宣传小助手的实践" /><published>2022-09-27T00:00:00+00:00</published><updated>2022-09-27T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/09/27/wechaty-university-admission-helper</id><content type="html" xml:base="https://wechaty.js.org/2022/09/27/wechaty-university-admission-helper/"><![CDATA[<p>一个能够智能识别关键词并自动回复招生信息的机器人，基于 Wechaty, Node.js 实现。</p>

<h2 id="背景">背景</h2>

<p>这是一篇迟到了三个月的文章，此时终于有机会能够补上。通过这篇文章，记录一下遇到的一些问题与解决方案。</p>

<p>三个月前的六月，正值高考放榜，各大高校都在进行火热的招生宣讲。随着咨询的人越来越多，招生宣传的拉的微信群也越来越多，于是突发奇想，反正大家问的问题无非就是今年招多少人，去年分数线如何，学校环境如何，专业如何等等，那这些重复性的回答工作为何不交给机器人来做呢？</p>

<h2 id="实现">实现</h2>

<p>由于当时正好是期末周，于是草草实现了一个基于关键词的自动回复功能。通过分析大家咨询的问题，我把每个人发的信息分为两个部分：和招生相关的词汇、疑问词汇。当这两种词汇同时出现时，基本可以断定是家长或者学生正在咨询招生相关问题。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">ADMISSION_WORDS</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">`计划`</span><span class="p">,</span>
  <span class="s2">`分数`</span><span class="p">,</span>
  <span class="s2">`录取`</span><span class="p">,</span>
  <span class="s2">`人数`</span><span class="p">,</span>
  <span class="s2">`招`</span><span class="p">,</span>
  <span class="s2">`专业`</span><span class="p">,</span>
<span class="p">];</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">QUESTIONS_WORDS</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">`请问`</span><span class="p">,</span>
  <span class="s2">`吗`</span><span class="p">,</span>
  <span class="s2">`呢`</span><span class="p">,</span>
  <span class="s2">`问`</span><span class="p">,</span>
  <span class="s2">`多少`</span><span class="p">,</span>
<span class="p">];</span>
</code></pre></div></div>

<p>这两个数组经过后期反复的调整，最终变为上面这样。</p>

<p>再设置一下固定的回复语句，一个自动回复的机器人就这么完成了。</p>

<h2 id="问题">问题</h2>

<p>用了一段时间之后，问题层出不穷。</p>

<h3 id="发送图片">发送图片</h3>

<p>首先，如果要将招生信息全部结合到文字中，那么最终回复的文字会相当的长，会造成刷屏的效果，所以必须要实现图片的发送功能，把部分信息通过图片发送。</p>

<p>当时使用的是 <code class="language-plaintext highlighter-rouge">wechaty-puppet-xp</code>，而 <code class="language-plaintext highlighter-rouge">puppet-xp</code> 的图片发送接口并不完善，通过阅读源代码发现只支持通过 URL 发送图片，遂将图片上传到图床，然后获取网址再发送。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">img</span> <span class="o">=</span> <span class="nx">FileBox</span><span class="p">.</span><span class="nx">fromUrl</span><span class="p">(</span><span class="nx">reply</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
</code></pre></div></div>

<p>上面的 <code class="language-plaintext highlighter-rouge">img</code> 就可以通过 <code class="language-plaintext highlighter-rouge">Wechaty</code> 的 <code class="language-plaintext highlighter-rouge">say()</code> 接口直接进行发送了。</p>

<p>效果如下：
<img src="/assets/2022/09-wechaty-university-admission-helper/question_and_answer.webp" alt="问答示例" /></p>

<h3 id="误判">误判</h3>

<p>当招生组老师发送招生信息时，发现机器人也会自动回复。如下图所示。
<img src="/assets/2022/09-wechaty-university-admission-helper/error.webp" alt="误判了招生组老师的信息" /></p>

<p>猜想是同时满足了刚才说的两种关键词的原因，于是调整了关键词词库，并添加了过滤掉招生组老师与本校学长学姐的消息，通过微信号识别特定的人，若满足条件则不发送招生信息。</p>

<h3 id="非招生群">非招生群</h3>

<p>由于我的机器人同时挂在了好几个群里，会出现不是招生宣传的微信群也会发送招生宣传的消息。于是加上了命令控制是否在本群发送招生信息的开关（默认不开启）。
<img src="/assets/2022/09-wechaty-university-admission-helper/command.webp" alt="命令控制示例" /></p>

<p>命令中包含学校信息，是因为一开始实现是基于可以为多个学校同时提供服务的想法，每个群可以独立发送不同高校的招生信息。</p>

<h3 id="定时发送">定时发送</h3>

<p>由于微信群有新成员不可查看历史信息的限制，招生组老师让我加上了一个定时发送的功能，通过定时发送招生信息，让后面加入微信群的成员可以及时获取最新消息。
<img src="/assets/2022/09-wechaty-university-admission-helper/timing.webp" alt="定时发送" /></p>

<h3 id="扰民">扰民</h3>

<p>由于机器人是对每一条消息进行识别，所以会导致如果想要咨询的人连续发了多条消息，机器人对每一条消息都会回复一串长长的文字，于是又加上了间隔一段时间再发送的机制，如果 10 分钟内识别到连续两条需要回复的消息，那么第二条消息将不会进行回复。</p>

<h2 id="总结">总结</h2>

<p>有了机器人的帮助，还是给招生老师的工作减轻了不少，不过这个功能仍然存在许多问题，需要后续继续加以改进。</p>

<p>项目地址：<a href="https://github.com/ligen131/Sunbot">github ligen131/Sunbot</a>，欢迎给我一个 Star⭐</p>

<p>除了招生小助手之外，还实现了不少好玩的功能，比如之前很火的 wordle 游戏，词云功能等等。或许会在另一篇文章中讲到。
<img src="/assets/2022/09-wechaty-university-admission-helper/wordle.webp" alt="wordle 游戏" /></p>

<blockquote>
  <p>作者: <a href="https://ligen131.com">ligen131</a>，生命不息，折腾不止。</p>
</blockquote>]]></content><author><name>ligen131</name></author><category term="article" /><category term="bot" /><category term="后端" /><category term="node.js" /><category term="typescript" /><category term="高校招生" /><summary type="html"><![CDATA[一个能够智能识别关键词并自动回复招生信息的机器人，基于 Wechaty, Node.js 实现。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/09-wechaty-university-admission-helper/cover.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/09-wechaty-university-admission-helper/cover.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">免费UOS协议快速接入可视化配置面板</title><link href="https://wechaty.js.org/2022/07/26/free-uos-ui/" rel="alternate" type="text/html" title="免费UOS协议快速接入可视化配置面板" /><published>2022-07-26T00:00:00+00:00</published><updated>2022-07-26T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/07/26/free-uos-ui</id><content type="html" xml:base="https://wechaty.js.org/2022/07/26/free-uos-ui/"><![CDATA[<p>经历过UOS web协议的重放荣光，又经过一段时间的封禁，又有大神把UOS web协议救回来了。免费的快乐又重新回来了，不是吗?</p>

<h2 id="背景">背景</h2>

<p>在闲逛各大平台学习(摸鱼)的时候，突然发现有群里有人发<code class="language-plaintext highlighter-rouge">python</code>的<code class="language-plaintext highlighter-rouge">ichat</code>可以使用uos协议了，我刚开始还很纳闷，uos不是被封一年多了吗，怎么会还可以用，抱着试试看
的态度问了一下，说有大佬已经研究破解了最新的解禁方式，并且还友好的发了一份说明。带着这份好奇，我测试了一番，果然已经可以登录了。那还说什么，赶紧去提个PR去修
复一下看看。研究了一个晚上按照<code class="language-plaintext highlighter-rouge">ichat</code>的方式去修改各种参数，但是最后才发现，其实并不需要，<code class="language-plaintext highlighter-rouge">puppet-wechat</code>本身就是hook web协议的，不需要各种参数构造
直接，修改<code class="language-plaintext highlighter-rouge">expam</code>加上修改登录地址即可，我这暴脾气啊…</p>

<p>具体修改代码参考：<a href="https://github.com/wechaty/puppet-wechat/pull/206">uos make puppet-wechat great again</a></p>

<p>对于<code class="language-plaintext highlighter-rouge">ichat</code>uos修复方案感兴趣的可以查看此文档（此文档非本人编写，也是其他大佬提供的）：<a href="https://docs.google.com/document/d/124zjP9K3URbUHQ2rC0LMQxp_PoMQ0G-KOYFFTYeiYVA/edit?usp=sharing">https://docs.google.com/document/d/124zjP9K3URbUHQ2rC0LMQxp_PoMQ0G-KOYFFTYeiYVA/edit?usp=sharing</a></p>

<h2 id="如何开启uos协议登录">如何开启uos协议登录</h2>

<p>默认的web协议是没有开启uos协议登录的，需要自行配置一下，旧版的<code class="language-plaintext highlighter-rouge">wechaty-puppet-wechat</code>是不支持，版本必须<code class="language-plaintext highlighter-rouge">&gt;=1.18.4</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>wechaty-puppet-wechat@latest <span class="nt">--save</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="nx">WechatyBuilder</span><span class="p">.</span><span class="nx">build</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">puppet-wechat</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">puppetOptions</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">uos</span><span class="p">:</span> <span class="kc">true</span>  <span class="c1">// 开启uos协议</span>
    <span class="p">},</span>
    <span class="na">puppet</span><span class="p">:</span> <span class="dl">'</span><span class="s1">wechaty-puppet-wechat</span><span class="dl">'</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="报错无法登录">报错无法登录？</h3>

<p>通常可能是由于你账号的原因，因为我已经测试了多个不能登录网页版微信的账户，都已经可以成功登陆。如果看不出错误，可以下载这个chrome插件，安装后，直接在浏览器访问<a href="https://wx.qq.com/?target=t">https://wx.qq.com/?target=t</a> 先测试一下，看看有什么报错</p>

<p>谷歌浏览器插件地址：<a href="https://github.com/leochen-g/wechrome">https://github.com/leochen-g/wechrome</a></p>

<h2 id="可视化配置面板">可视化配置面板</h2>

<p><img src="/assets/2022/07-free-uos-ui/1.webp" alt="home" /></p>

<p><img src="/assets/2022/07-free-uos-ui/2.webp" alt="main" /></p>

<p><img src="/assets/2022/07-free-uos-ui/3.webp" alt="news" /></p>

<h3 id="功能介绍">功能介绍</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />微信每日说,定时给女朋友发送每日天气提醒，以及每日一句</li>
</ul>

<p>定时提醒</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />当天定时提醒 例：”提醒 我 18:00 下班了，记得带好随身物品”</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />每天定时提醒 例：”提醒 我 每天 18:00 下班了，记得带好随身物品”</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />指定日期提醒 例：”提醒 我 2019-05-10 8:00 还有 7 天是女朋友生日了，准备一下”</li>
</ul>

<p>智能机器人</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />天行机器人</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />图灵机器人</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />腾讯闲聊机器人</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />微信对话开放平台</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />更多</li>
</ul>

<p>群定时任务</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />群新闻定时发送</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />群消息定时发送</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />更多功能等你来 pr</li>
</ul>

<p>关键词</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />关键词加好友</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />关键词加群</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />关键词回复</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />关键词事件
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />天气查询 例：”上海天气”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />垃圾分类 例：”?香蕉皮”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />名人名言 例： “名人名言”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />老黄历查询 例： “黄历 2019-6-13”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />姓氏起源 例： “姓陈”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />星座运势 例： “*双子座”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />神回复 例： “神回复”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />获取表情包 例： “表情包你好坏”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />获取美女图 例： “美女图”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />群合影 例： “群合影”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />牛年头像 例： “牛气冲天”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />国旗头像 例： “我要国旗”</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />更多待你发现</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />进群自动欢迎</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />加好友自动回复</li>
</ul>

<p>自动更新配置文件，无需重启</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />默认给机器人发送 ‘更新’ 触发拉取新配置文件操作，可在面板<code class="language-plaintext highlighter-rouge">小助手配置-&gt;关键词回复-&gt;关键词事件</code>进行修改关键词</li>
</ul>

<p>特色功能</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />群合影</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />主动发送消息</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />主动更新配置</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />主动同步好友和群列表</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />多群消息同步</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />openapi请求</li>
</ul>

<h2 id="提前准备">提前准备</h2>

<h3 id="注册智能微秘书管理账号">注册智能微秘书管理账号</h3>

<ol>
  <li>
    <p>注册：<a href="http://wechat.aibotk.com/signup?from=wechatyblog">智能微秘书</a></p>
  </li>
  <li>
    <p>初始化配置文件<code class="language-plaintext highlighter-rouge">小助手配置-&gt;基础配置</code>，修改后保存</p>
  </li>
  <li>
    <p>个人中心获取<code class="language-plaintext highlighter-rouge">APIKEY</code>和<code class="language-plaintext highlighter-rouge">APISECRET</code>，后续配置用到</p>
  </li>
</ol>

<h3 id="注册天行数据账号">注册天行数据账号</h3>

<p>由于本项目大部分定时资讯和一些天气接口来自于天行数据，所以需要提前准备好天行数据的账号，同时申请好相关接口的权限</p>

<p>1、注册: <a href="https://www.tianapi.com/source/865c0f3bfa">天行数据</a></p>

<p>2、申请接口权限</p>

<p>必选接口</p>

<ul>
  <li><a href="https://www.tianapi.com/apiview/47">天行机器人</a></li>
  <li><a href="https://www.tianapi.com/apiview/72">天气</a></li>
  <li><a href="https://www.tianapi.com/apiview/51">新闻</a></li>
  <li><a href="https://www.tianapi.com/apiview/97">垃圾分类</a></li>
</ul>

<p>可选接口（如果想使用相应的功能还是必须申请的），但是如果默认使用了天行机器人，以下功能接口无需申请也可以，机器人会直接返回对应信息</p>

<ul>
  <li><a href="https://www.tianapi.com/apiview/80">土味情话</a></li>
  <li><a href="https://www.tianapi.com/apiview/92">名人名言</a></li>
  <li><a href="https://www.tianapi.com/apiview/78">星座运势</a></li>
  <li><a href="https://www.tianapi.com/apiview/94">姓氏起源</a></li>
  <li><a href="https://www.tianapi.com/apiview/54">顺口溜</a></li>
  <li><a href="https://www.tianapi.com/apiview/45">老黄历</a></li>
  <li><a href="https://www.tianapi.com/apiview/39">神回复</a></li>
  <li><a href="https://www.tianapi.com/apiview/38">歇后语</a></li>
  <li><a href="https://www.tianapi.com/apiview/37">绕口令</a></li>
  <li><a href="https://www.tianapi.com/apiview/169">疫情</a></li>
  <li><a href="https://www.tianapi.com/apiview/36">网络取名</a></li>
</ul>

<h2 id="开始运行">开始运行</h2>

<blockquote>
  <p>环境node &gt; 16</p>
</blockquote>

<h3 id="step-1-安装">Step 1: 安装</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>wechaty-web-panel@latest wechaty@latest <span class="nt">--save</span>
</code></pre></div></div>

<h3 id="step-2-创建机器人并配置插件的apikey和apisecret">Step 2: 创建机器人并配置插件的<code class="language-plaintext highlighter-rouge">apiKey</code>和<code class="language-plaintext highlighter-rouge">apiSecret</code></h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim mybot.js

const <span class="o">{</span>WechatyBuilder<span class="o">}</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">'wechaty'</span><span class="o">)</span>
const WechatyWebPanelPlugin <span class="o">=</span> require<span class="o">(</span><span class="s1">'../src/index'</span><span class="o">)</span>

const name <span class="o">=</span> <span class="s1">'wechat-assistant'</span>

const bot <span class="o">=</span> WechatyBuilder.build<span class="o">({</span>
    name, // generate xxxx.memory-card.json and save login data <span class="k">for </span>the next login
    puppet: <span class="s1">'wechaty-puppet-wechat'</span>,
<span class="o">})</span>
bot
    .use<span class="o">(</span>WechatyWebPanelPlugin<span class="o">({</span>
        apiKey: <span class="s1">'apiKey'</span>,
        apiSecret: <span class="s1">'apiSecret'</span>
    <span class="o">}))</span>
    .start<span class="o">()</span>
    .catch<span class="o">((</span>e<span class="o">)</span> <span class="o">=&gt;</span> console.error<span class="o">(</span>e<span class="o">))</span>

</code></pre></div></div>

<h3 id="step-3-运行">Step 3: 运行</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node mybot.js
</code></pre></div></div>

<h3 id="step-4-扫码进入">Step 4: 扫码进入</h3>

<p>进入面板<code class="language-plaintext highlighter-rouge">小助手配置-&gt;登录状态</code>扫码登录，或直接扫码控制台二维码登录</p>

<h3 id="直接拉取镜像推荐">直接拉取镜像（推荐）</h3>

<p>由于群里经常反应会遇到各种环境问题，或者经常会卡住，所以本项目已经提前构建好发布到dockerhub了，直接pull就行了</p>

<h4 id="step1-拉取镜像">step1： 拉取镜像</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
docker pull aibotk/wechat-assistant

</code></pre></div></div>

<h4 id="step2-启动docker">step2： 启动docker</h4>

<p>以下两个命令自己选择一个执行就行，执行的时候会下载puppet，可能会比较慢，耐心等待一下即可</p>

<p>1、请在项目根目录执行，这个命令是前台执行可以直接看到log日志的，但是没法关闭，只能销毁终端实例</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-e</span> <span class="nv">AIBOTK_KEY</span><span class="o">=</span><span class="s2">"微秘书apikey"</span> <span class="nt">-e</span> <span class="nv">AIBOTK_SECRET</span><span class="o">=</span><span class="s2">"微秘书apiSecret"</span> <span class="nt">--name</span><span class="o">=</span>wechatbot aibotk/wechat-assistant

</code></pre></div></div>

<p>2、这个命令可以在后台运行，多了一个<code class="language-plaintext highlighter-rouge">-d</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-e</span> <span class="nv">AIBOTK_KEY</span><span class="o">=</span><span class="s2">"微秘书apikey"</span> <span class="nt">-e</span> <span class="nv">AIBOTK_SECRET</span><span class="o">=</span><span class="s2">"微秘书apiSecret"</span> <span class="nt">--name</span><span class="o">=</span>wechatbot aibotk/wechat-assistant

</code></pre></div></div>

<p><a href="https://www.cnblogs.com/mydesky2012/p/11430394.html">如何查看docker日志</a></p>

<h2 id="源码">源码</h2>

<p>客户端所有实现的功能均已经开源：<a href="https://github.com/leochen-g/wechaty-web-panel">Wechaty-web-panel</a> ，欢迎star</p>

<h2 id="其他协议">其他协议</h2>

<ul>
  <li>ipad协议对接可视化面板：<a href="https://github.com/leochen-g/wechat-assistant-pro-ipad">wechat-assistant-pro-ipad</a></li>
  <li>5G消息对接可视化面板：<a href="https://github.com/leochen-g/walnut-aibot">walnut-aibot</a></li>
  <li>xp协议对接可视化面板： <a href="http://wechat.aibotk.com/docs/faq">如何使用免费的 wechaty-puppet-xp 协议</a></li>
</ul>

<h3 id="其他插件">其他插件</h3>

<ul>
  <li><a href="https://github.com/leochen-g/wechaty-fanli">wechaty-fanli插件</a> ：基于wechaty实现的返利微信机器人，根据淘口令生成高佣转链接，并创建新的淘口令</li>
  <li><a href="https://github.com/leochen-g/wechaty-face-cartoon">wechaty-face-cartoon</a> ：Wechaty 人像转换插件，让你的 Wechaty 机器人实现照片卡通化，年龄变化，性别变化等功能</li>
  <li><a href="https://github.com/leochen-g/wechaty-dice-king">wechaty-dice-king</a> ：Wechaty 骰王卡牌抽取游戏插件，类似<a href="https://v2docs.kokona.tech/zh/latest/CookBook.html">骰娘</a> ,也可以在微信群实现玩狼人杀</li>
</ul>]]></content><author><name>leochen-g</name></author><category term="talk" /><category term="code" /><category term="puppet-wechat" /><category term="web-protocol" /><summary type="html"><![CDATA[经历过UOS web协议的重放荣光，又经过一段时间的封禁，又有大神把UOS web协议救回来了。免费的快乐又重新回来了，不是吗?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/07-free-uos-ui/wechaty-puppet-wechat.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/07-free-uos-ui/wechaty-puppet-wechat.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Wechaty community meetup: Office Hour, Feb 22th, 2022</title><link href="https://wechaty.js.org/2022/07/22/wechaty-office-hour/" rel="alternate" type="text/html" title="Wechaty community meetup: Office Hour, Feb 22th, 2022" /><published>2022-07-22T00:00:00+00:00</published><updated>2022-07-22T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/07/22/wechaty-office-hour</id><content type="html" xml:base="https://wechaty.js.org/2022/07/22/wechaty-office-hour/"><![CDATA[<p>7月22日，周五，社区在线上举办了一个 Office Hour 的视频会议，由 <code class="language-plaintext highlighter-rouge">@Huan</code>，<code class="language-plaintext highlighter-rouge">@wj-Mcat</code>，<code class="language-plaintext highlighter-rouge">@Leo_chen</code> 共同讨论了一下社区中一些新项目的进展，并且相互提出了一些建议。</p>

<p><strong>本篇文章是基于视频会议回放整理出来的内容</strong>，视频会议回放如下：</p>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/JAOhsyW937c" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h2 id="与会者介绍">与会者介绍</h2>

<p><a href="https://github.com/huan">@huan</a>, <a href="https://wechaty.js.org/contributors/huan">Huan LI</a>, Creator of Wechaty, Tencent TVP of Chatbot</p>

<p><a href="https://github.com/wj-Mcat">@wj-Mcat</a>, Author of <a href="https://github.com/wechaty/python-wechaty">python-wechaty</a></p>

<p><a href="https://github.com/leochen-g">@Leo_chen</a>: Author of <a href="https://github.com/leochen-g/wechaty-web-panel">Wechaty-web-panel</a></p>

<h2 id="个人分享环节">个人分享环节</h2>

<h3 id="leo_chen">Leo_chen</h3>

<p>近期关注：</p>

<ul>
  <li>硬核桃社区5G消息套件 的 <a href="https://github.com/wechaty/puppet-walnut">puppet-walnut</a></li>
  <li>硬核桃社区5G消息网关 的 <a href="https://github.com/leochen-g/puppet-walnut-gateway">puppet-walnut-gateway</a></li>
  <li>关于适配市面支持http调用的IM接口</li>
</ul>

<h3 id="wj-mcat">wj-Mcat</h3>

<p>近期关注：</p>

<ul>
  <li>Wechaty-ui的开发推进，实现Wechaty社区官方的UI插件管理中心</li>
</ul>

<h3 id="huan">huan</h3>

<ul>
  <li>回顾了最早时期Wechaty的愿景，具体文档可以参见<a href="https://docs.google.com/presentation/d/13oUOIEnzdLWO6KZWztD_pMuu22AQ3SIMjk2wp8f-f18/edit#slide=id.g194ee6e600_0_51">Wechaty 101</a></li>
</ul>

<h2 id="faq-meetup">FAQ Meetup</h2>

<p>主要讲四块：</p>

<ul>
  <li>5G消息puppet模块的更替，需要和丁生和康嘉再进行一次讨论</li>
  <li>关于Post Message 的扩展，可以支持更多的其他消息类型</li>
  <li>关于实现engine-template去支持市面所有可以进行http或websocket的调用的协议</li>
  <li>Wechaty-ui的设计模式及具体展现形式</li>
</ul>

<h2 id="suggestions">Suggestions</h2>

<h3 id="wechaty-ui">Wechaty-ui：</h3>

<ul>
  <li>strongly suggests using Angular as a web framework because Angular will be used with the official Wechaty cloud service in the future</li>
</ul>

<h3 id="cqrs--ddd">CQRS &amp; DDD：</h3>

<p>Event Driven Programming with Wechaty：</p>

<ul>
  <li><a href="https://wechaty.js.org/2022/03/17/event-driven-wechaty-cqrs/">Event Driven Wechaty-cqrs</a></li>
  <li><a href="https://github.com/wechaty/cqrs">CQRS</a></li>
</ul>

<h2 id="future-wechaty-community-official-hour">Future Wechaty Community Official Hour</h2>

<p><a href="https://calendly.com/huan/wechaty">https://calendly.com/huan/wechaty</a></p>]]></content><author><name>leochen-g</name></author><category term="talk" /><category term="wechaty-puppet-walnut" /><category term="wechaty-ui" /><category term="meetup" /><summary type="html"><![CDATA[7月22日，周五，社区在线上举办了一个 Office Hour 的视频会议，由 @Huan，@wj-Mcat，@Leo_chen 共同讨论了一下社区中一些新项目的进展，并且相互提出了一些建议。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/07-wechaty-office-hour/icon.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/07-wechaty-office-hour/icon.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">三步开发聊天机器人一秒生成漫画头像</title><link href="https://wechaty.js.org/2022/07/21/three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/" rel="alternate" type="text/html" title="三步开发聊天机器人一秒生成漫画头像" /><published>2022-07-21T00:00:00+00:00</published><updated>2022-07-21T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/07/21/three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second</id><content type="html" xml:base="https://wechaty.js.org/2022/07/21/three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/"><![CDATA[<p>大家好，我是胡琦。由于各种原因以及没能好好坚持笔记写作的习惯，距离上次分享有小半年了，今天给大家带来的是《三步开发聊天机器人一秒生成漫画头像》，其实就一个小小的功能：通过给微信群聊发送特定关键字触发聊天机器人头像漫画化处理程序，从而生成动漫化的头像。怎么实现呢？总的思路就是基于 ModelArts AI Gallery 快速验证 AnimateGanv2 现实照片动漫化能力，基于 Flask 快速部署动漫化服务，基于 Wechaty 快速开发动漫化聊天机器人。</p>

<h2 id="为什么是-animegan">为什么是 AnimeGAN?</h2>

<p>动漫(Animation &amp; Comic)作为日常生活中一种常见的艺术表现形式，在儿童教育、影视、广告等领域中应用十分广泛；但动漫创作困难、周期长、开发难度大，对创作者要求也十分苛刻，一般来说好的动漫作品需要创作者掌握线条、纹理、颜色和阴影等绘画技巧；普通人想要快速创造自己的动漫作品不得不借助工具。近年来，随着元宇宙的不断发展，人们对动漫的需求越来越多，比如生成二次元自画像、制作 NFT 艺术品等等，因此动漫风格迁移似乎成为“炼丹师”们喜爱的研究方向之一。</p>

<p>图像风格迁移还得从 <a href="https://phillipi.github.io/pix2pix/">pix2pix</a> 和 <a href="https://junyanz.github.io/CycleGAN/">CycleGAN</a> 说起，这两个基于 GAN 的风格迁移算法为动漫画图片生成奠定了技术基础，后续的 <a href="https://openaccess.thecvf.com/content_cvpr_2018/papers/Chen_CartoonGAN_Generative_Adversarial_CVPR_2018_paper.pdf">CartoonGAN</a> 通过语义内容损失函数和边缘增强的对抗性损失函数使生成的动漫图片质量更高。而 <a href="https://github.com/TachibanaYoshino/AnimeGAN/blob/master/doc/Chen2020_Chapter_AnimeGAN.pdf">AnimeGAN</a>基于 CartoonGAN 改进，并提出了一个更加轻量级的生成器架构以及灰度风格损失、灰度对抗损失和颜色重建损失三个新的损失函数，使其风格化的视觉效果能超越 CartoonGAN。</p>

<p>毕竟，AnimeGAN 让新海诚本人都感觉很有趣；而对于我们普通人来说，多了一种创作的可能，只需一张现实照片就能通过 AI 输出大师级的动漫作品！</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/1.webp" alt="新海诚 AnimeGAN" /></p>

<h2 id="什么是-animegan-">什么是 AnimeGAN ？</h2>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/2.webp" alt="AnimeGAN 发展历程" /></p>

<p>提到 AnimeGAN ，不得不说说它的发展历程，一作<a href="https://github.com/TachibanaYoshino">Asher Chan</a>从 2019 年提交第一个 Git Commit 至今，已经迭代了三个版本，<a href="https://github.com/TachibanaYoshino/AnimeGANv3">AnimeGANv3</a>放出了可执行程序和刚出炉还热乎的肖像素描（点我快速体验：<a href="https://developer.huaweicloud.com/develop/aigallery/notebook/detail?id=8e87f943-9178-48d7-be00-28b9007dc7cb">Run in ModelArts - AnimeGANv3 肖像素描生成</a>）。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/3.webp" alt="AnimeGANv3 生成肖像画" /></p>

<p>AnimeGAN 实现了将现实世界场景的照片转换为动漫风格图像。 <a href="https://cdn.jsdelivr.net/gh/TachibanaYoshino/AnimeGAN/doc/Chen2020_Chapter_AnimeGAN.pdf">AnimeGANv1</a> 提出了三种损失函数：灰度样式损失、颜色重建损失和灰度对抗损失。<br />
解决了：<br />
1.生成的图像没有明显的动画风格纹理<br />
2.生成的图像丢失了原始图像的内容；<br />
3.网络的参数需要大的存储容量。</p>

<p><a href="https://tachibanayoshino.github.io/AnimeGANv2/">AnimeGANv2</a> 修复了上个版本中存在的问题，例如模型生成的图像中存在高频伪影;更容易训练且直接能到达论文效果；进一步减少网络参数使生成器更小；尽可能多地使用更高画质的风格数据。作者觉得创新性不大因此就没重新发表论文。</p>

<p><a href="https://github.com/TachibanaYoshino/AnimeGANv3">AnimeGANv3</a> 基于与 Google 的商业许可，作者暂时不提供源码。不过目前提供了图形用户界面程序 (AnimeGANv3.exe) 和预训练模型 (onnx.zip) ，目前我们可以直接在 Windows 上体验图片或视频转动漫风格。截止笔者发文，作者由更新了 AnimeGANv3_PortraitSketch 用于生成肖像画，也就是上图的效果。</p>

<p>笔者有幸体验了 AnimeGAN 带来的乐趣，下图中左边是在华为云 ModelArts 上运行的结果，通过识别人脸关键点之后再进行风格迁移能获得动漫化头像；右边是 AnimeGANv3.exe 在本地运行的结果，我们无需关系环境和代码执行，简单操作就能生成动漫图片；中间是本次分享的主角–一个能将图片动漫化的聊天机器人。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/4.webp" alt="AnimeGAN 应用" /></p>

<h2 id="在-ai-gallery-上提前验证">在 AI Gallery 上提前验证</h2>

<p>我们通常认为“数据、算法、算力”是人工智能的三要素，现如今，处在大数据时代，可靠高质量的数据的获得变得简洁；优质的算法随着开源文化的发展也变得普及；然而算力确成了制约人工智能普及的“拦路虎”，就连 AnimeGAN 的作者也感叹<a href="https://github.com/TachibanaYoshino/AnimeGANv3/issues/1">“论文的延迟发表只因只借到了一年的 2080ti”</a>。对于笔者而言，幸亏有普惠 AI 的华为云 ModelArts，<a href="https://developer.huaweicloud.com/develop/aigallery/home.html">AI Gallery</a> 是在 ModelArts 的基础上构建的开发者生态社区，提供了 Notebook 代码样例、数据集、算法、模型、Workflow 等 AI 数字资产的共享，姑且理解为 AI 届的 Github。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/5.webp" alt="AI Gallery" /></p>

<p>数据方面，AI Gallery 的数据模块支持数据集的共享和下载；而且数据集是支持 License 声明的，这一点类似于开源社区；
算法方面，AI Gallery 的算法模块支持算法的共享和订阅；并且算法支持变现，类似于一个算法商城；
算力方面，用户在 AI Gallery 中通过点击“Run in ModelArts”可以将 Notebook 案例在 ModelArts 控制台快速打开、运行以及进行二次开发等操作，目前提供有限的免费算力。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/6.webp" alt="一键Run in ModelArts，算力我有" /></p>

<p>通过学习改造 AI Gallery 已有的 AnimeGAN 案例，我们能够快速运行 NoteBook 并得到动漫化头像。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/7.webp" alt="Github 头像动漫化" /></p>

<h2 id="基于-wechaty-快速构建机器人">基于 Wechaty 快速构建机器人</h2>

<p>提到聊天机器人的开发，作为前端工程师，笔者认为最快捷的方式莫过于<code class="language-plaintext highlighter-rouge">import {Wechaty} from "wechaty";</code>,是的，Wechaty 是一个开源的的对话机器人 SDK，支持 个人号 微信。它是一个使用 Typescript 构建的 Node.js 应用。支持多种微信接入方案，包括网页，ipad，ios，windows， android 等。同时支持 Linux, Windows, Darwin(OSX/Mac) 和 Docker 多个平台。因此我们要实现聊天机器人就十分简单了！（PS：除了 token 有点小贵，当然有能力有创意可以加入官方资助计划）。</p>

<p><img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/8.webp" alt="Wechaty 构建机器人" /></p>

<p>聊天机器人有了，接下来怎么接入 AnimeGAN 的能力呢？为了给机器人提供服务，我们需要部署一个应用给前端提供接口，暂且使用 Flask 快速部署头像动漫化服务。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="o">*</span>
<span class="c1"># import request
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">animeGANv2</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">,</span><span class="n">template_folder</span><span class="o">=</span><span class="s">'view'</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="s">'MAX_CONTENT_LENGTH'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>  <span class="c1"># 3MB
</span>
<span class="c1"># 转换图片文件
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/postdata'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">postdata</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">[</span><span class="s">'content'</span><span class="p">]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">user_input</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span>
    <span class="n">basepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>  <span class="c1"># 当前文件所在路径
</span>    <span class="n">src_imgname</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="n">uuid1</span><span class="p">())</span> <span class="o">+</span> <span class="s">".jpg"</span>
    <span class="n">upload_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">basepath</span><span class="p">,</span> <span class="s">'static/srcImg/'</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">upload_path</span><span class="p">)</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">upload_path</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">upload_path</span> <span class="o">+</span> <span class="n">src_imgname</span><span class="p">)</span>
    <span class="c1"># img = cv2.imread(upload_path + src_imgname, 1)
</span>
    <span class="n">save_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">basepath</span><span class="p">,</span> <span class="s">'static/resImg/'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">save_path</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">save_path</span><span class="p">)</span>
    <span class="n">fileSize</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">upload_path</span><span class="o">+</span><span class="n">src_imgname</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fileSize</span> <span class="o">/</span> <span class="mi">1024</span> <span class="o">/</span> <span class="mi">1024</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">resSets</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">resSets</span><span class="p">[</span><span class="s">"value"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">resSets</span><span class="p">[</span><span class="s">"resurl"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"http://127.0.0.1:5000"</span> <span class="o">+</span><span class="s">'/static/resImg/'</span> <span class="o">+</span> <span class="n">src_imgname</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">inference_from_file</span><span class="p">(</span><span class="n">upload_path</span><span class="o">+</span><span class="n">src_imgname</span><span class="p">,</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_path</span><span class="p">,</span> <span class="n">src_imgname</span><span class="p">))</span>
        <span class="n">resSets</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">resSets</span><span class="p">[</span><span class="s">"value"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">resSets</span><span class="p">[</span><span class="s">"resurl"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"http://127.0.0.1:5000"</span> <span class="o">+</span><span class="s">'/static/resImg/'</span> <span class="o">+</span> <span class="n">src_imgname</span>
    <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">resSets</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># 转换图片链接
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/postdataUrl'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">postdataUrl</span><span class="p">():</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="s">'content'</span><span class="p">]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">user_input</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span>
    <span class="n">basepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>  <span class="c1"># 当前文件所在路径
</span>    <span class="n">src_imgname</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="n">uuid1</span><span class="p">())</span> <span class="o">+</span> <span class="s">".jpg"</span>

    <span class="n">save_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">basepath</span><span class="p">,</span> <span class="s">'static/resImg/'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">save_path</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">save_path</span><span class="p">)</span>
    <span class="n">inference_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_path</span><span class="p">,</span> <span class="n">src_imgname</span><span class="p">))</span>
    <span class="n">resSets</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="n">resSets</span><span class="p">[</span><span class="s">"value"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">resSets</span><span class="p">[</span><span class="s">"resurl"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"http://127.0.0.1:5000"</span> <span class="o">+</span><span class="s">'/static/resImg/'</span> <span class="o">+</span> <span class="n">src_imgname</span>
    <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">resSets</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
   <span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">threaded</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>完整代码详见：<a href="https://github.com/hu-qi/MDG-AnimeGANv2">https://github.com/hu-qi/MDG-AnimeGANv2</a></strong></p>
</blockquote>

<p>大致的效果如下图：
<img src="/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/9.webp" alt="头像漫画风聊天机器人" /></p>

<p>至此我们已经完整地快速开发了一个头像漫画风聊天机器人，是不是很简单？文章有不当之处欢迎指正！</p>]]></content><author><name>hu-qi</name></author><category term="article" /><category term="puppet-service" /><category term="code" /><category term="ai" /><summary type="html"><![CDATA[大家好，我是胡琦。由于各种原因以及没能好好坚持笔记写作的习惯，距离上次分享有小半年了，今天给大家带来的是《三步开发聊天机器人一秒生成漫画头像》，其实就一个小小的功能：通过给微信群聊发送特定关键字触发聊天机器人头像漫画化处理程序，从而生成动漫化的头像。怎么实现呢？总的思路就是基于 ModelArts AI Gallery 快速验证 AnimateGanv2 现实照片动漫化能力，基于 Flask 快速部署动漫化服务，基于 Wechaty 快速开发动漫化聊天机器人。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/title.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/07-three-steps-to-develop-a-chatbot-to-generate-cartoon-avatars-in-one-second/title.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Wechaty Gateway 使用教程</title><link href="https://wechaty.js.org/2022/06/23/wechaty-gateway-use/" rel="alternate" type="text/html" title="Wechaty Gateway 使用教程" /><published>2022-06-23T00:00:00+00:00</published><updated>2022-06-23T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/06/23/wechaty-gateway-use</id><content type="html" xml:base="https://wechaty.js.org/2022/06/23/wechaty-gateway-use/"><![CDATA[<h2 id="前言">前言</h2>

<h3 id="声明">声明</h3>

<ol>
  <li>wechaty 属于开源工具，并没有太多的义务帮你解决问题</li>
  <li>大家也多是一步一步学习的，工具做好了基本也潜水了</li>
  <li>所以请尝试自己查找资料</li>
  <li>我喜欢go嘛</li>
</ol>

<h3 id="提问的艺术">提问的艺术</h3>

<ol>
  <li>其实 <a href="https://wechaty.js.org/">wechaty官网</a> 已经很详细了，这里有很多的文档可供参考</li>
  <li>使用谷歌语法 <code class="language-plaintext highlighter-rouge">wechaty go xp</code></li>
  <li>使用 Github 搜索 <code class="language-plaintext highlighter-rouge">org:wechaty roomInvitation</code></li>
  <li>请将你的<code class="language-plaintext highlighter-rouge">问题，代码，错误日志</code>一起提交到 issues</li>
  <li>希望你能接受上面的说法，感谢</li>
</ol>

<h3 id="关于架构">关于架构</h3>

<pre><code class="language-mermaid">flowchart LR
    Polyglot--&gt;Python
    Polyglot--&gt;Go
    Polyglot --&gt;Rust
    Python--&gt;Grpc
    Go--&gt;Grpc
    Rust--&gt;Grpc
    Grpc--&gt;Puppet
    Puppet--&gt;Padlocal
    Puppet--&gt;Wechat4U
    Puppet--&gt;XP
    Padlocal--&gt;微信
    Wechat4U--&gt;微信
    XP--&gt;微信
</code></pre>

<h2 id="wechat4u">Wechat4U</h2>

<ul>
  <li>首先确定你能不能使用网页版登录</li>
  <li>Wechat4U Token 不需要钱，随机生成就好</li>
  <li>下面这一套不需要 docker，安装简单</li>
</ul>

<pre><code class="language-mermaid">flowchart LR
    Polyglot--&gt;Python
    Polyglot--&gt;Go
    Polyglot --&gt;Rust
    Python--&gt;Grpc
    Go--&gt;Grpc
    Rust--&gt;Grpc
    Grpc--&gt;Gateway{Gateway}--&gt;Wechat4U
    Wechat4U--&gt;微信
</code></pre>

<h3 id="gateway">Gateway</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> wechaty wechaty-puppet-wechat4u
<span class="c"># npm --registry https://registry.npm.taobao.org install -g wechaty wechaty-puppet-wechat4u</span>

<span class="nb">export </span><span class="nv">WECHATY_PUPPET</span><span class="o">=</span><span class="s2">"wechaty-puppet-wechat4u"</span>
<span class="nb">export </span><span class="nv">WECHATY_TOKEN</span><span class="o">=</span><span class="s2">"d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span>
<span class="c"># export WECHATY_TOKEN=$(curl -s https://www.uuidgenerator.net/api/version4)</span>

<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVICE_TOKEN</span><span class="o">=</span><span class="s2">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span>
<span class="c"># export WECHATY_PUPPET_SERVICE_TOKEN="insecure_$(curl -s https://www.uuidgenerator.net/api/version4)"</span>

<span class="nb">export </span><span class="nv">WECHATY_LOG</span><span class="o">=</span><span class="s2">"verbose"</span>
<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVER_PORT</span><span class="o">=</span><span class="s2">"25000"</span>
<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVICE_NO_TLS_INSECURE_SERVER</span><span class="o">=</span><span class="nb">true

</span>wechaty gateway <span class="nt">--puppet</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET</span><span class="k">}</span> <span class="nt">--port</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET_SERVER_PORT</span><span class="k">}</span> <span class="nt">--token</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET_SERVICE_TOKEN</span><span class="k">}</span> <span class="nt">--puppet-token</span> <span class="k">${</span><span class="nv">WECHATY_TOKEN</span><span class="k">}</span>
</code></pre></div></div>

<p>上面这些就是网关啦，希望你能使用它来作为你的常用工具</p>

<p>wechaty 会在当前目录生成 <code class="language-plaintext highlighter-rouge">Gateway.memory-card.json</code>  有了这个文件就不需要总是重新登陆了</p>

<h3 id="polyglotwechat4u">Polyglot(wechat4u)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// 其他的官网 demo 照抄就OK，这个使用的是 go-wechaty</span>
<span class="c">// demo: https://github.com/wechaty/go-wechaty/blob/master/examples/ding-dong-bot.go</span>
<span class="k">var</span> <span class="n">bot</span> <span class="o">=</span> <span class="n">wechaty</span><span class="o">.</span><span class="n">NewWechaty</span><span class="p">(</span><span class="n">wechaty</span><span class="o">.</span><span class="n">WithPuppetOption</span><span class="p">(</span><span class="n">wp</span><span class="o">.</span><span class="n">Option</span><span class="p">{</span>
    <span class="n">Token</span><span class="o">:</span> <span class="s">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span><span class="p">,</span>
    <span class="n">Endpoint</span><span class="o">:</span> <span class="s">"127.0.0.1:25000"</span><span class="p">,</span>
    <span class="n">Timeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">10</span><span class="p">,</span>
<span class="p">}))</span>
</code></pre></div></div>

<h2 id="xp">XP</h2>

<ul>
  <li>相比而言，padLocal 协议更稳定</li>
  <li>XP Token 不需要钱，随机生成就好</li>
  <li>下面这一套不需要 docker，安装简单</li>
  <li>安装<a href="https://github.com/wechaty/wechaty-puppet-xp/releases/download/v0.5/WeChatSetup-v3.3.0.115.exe">微信</a></li>
  <li>Demo : <a href="https://github.com/Ran-Xing/Go-wechaty-Bot">Go-wechaty-Bot</a> - 欢迎下载体验、踢出宝贵的修复建议</li>
</ul>

<pre><code class="language-mermaid">flowchart LR
    Polyglot--&gt;Python
    Polyglot--&gt;Go
    Polyglot --&gt;Rust
    Python--&gt;Grpc
    Go--&gt;Grpc
    Rust--&gt;Grpc
    Grpc--&gt;Gateway{Gateway}--&gt;XP
    XP--&gt;微信
</code></pre>

<h3 id="gatewaywechat4u">Gateway(wechat4u)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 这些仅适用于 Windows，因为 xp 支持的是Windows版本微信</span>
npm <span class="nb">install</span> <span class="nt">-g</span> wechaty wechaty-puppet-xp
<span class="c"># npm --registry https://registry.npm.taobao.org install -g wechaty wechaty-puppet-xp</span>

<span class="nb">set </span><span class="nv">WECHATY_PUPPET</span><span class="o">=</span><span class="s2">"wechaty-puppet-xp"</span>
<span class="nb">set </span><span class="nv">WECHATY_TOKEN</span><span class="o">=</span><span class="s2">"d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span>
<span class="c"># set WECHATY_TOKEN=$(curl -s https://www.uuidgenerator.net/api/version4)</span>

<span class="nb">set </span><span class="nv">WECHATY_PUPPET_SERVICE_TOKEN</span><span class="o">=</span><span class="s2">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span>
<span class="c"># set WECHATY_PUPPET_SERVICE_TOKEN="insecure_$(curl -s https://www.uuidgenerator.net/api/version4)"</span>

<span class="nb">set </span><span class="nv">WECHATY_LOG</span><span class="o">=</span><span class="s2">"verbose"</span>
<span class="nb">set </span><span class="nv">WECHATY_PUPPET_SERVER_PORT</span><span class="o">=</span><span class="s2">"25000"</span>
<span class="nb">set </span><span class="nv">WECHATY_PUPPET_SERVICE_NO_TLS_INSECURE_SERVER</span><span class="o">=</span><span class="nb">true

</span>wechaty gateway <span class="nt">--puppet</span> %WECHATY_PUPPET% <span class="nt">--port</span> %WECHATY_PUPPET_SERVER_PORT% <span class="nt">--token</span> %WECHATY_PUPPET_SERVICE_TOKEN% <span class="nt">--puppet-token</span> %WECHATY_TOKEN%
</code></pre></div></div>

<p>上面这一堆麻烦的东西就是网关啦，希望你能使用它来作为你的好助手！</p>

<h3 id="polyglotxp">Polyglot(xp)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// 其他的官网 demo 照抄就OK，这个使用的是 go-wechaty</span>
<span class="c">// demo: https://github.com/wechaty/go-wechaty/blob/master/examples/ding-dong-bot.go</span>
<span class="k">var</span> <span class="n">bot</span> <span class="o">=</span> <span class="n">wechaty</span><span class="o">.</span><span class="n">NewWechaty</span><span class="p">(</span><span class="n">wechaty</span><span class="o">.</span><span class="n">WithPuppetOption</span><span class="p">(</span><span class="n">wp</span><span class="o">.</span><span class="n">Option</span><span class="p">{</span>
    <span class="n">Token</span><span class="o">:</span> <span class="s">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span><span class="p">,</span>
    <span class="n">Endpoint</span><span class="o">:</span> <span class="s">"127.0.0.1:25000"</span><span class="p">,</span>
    <span class="n">Timeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">10</span><span class="p">,</span>
<span class="p">}))</span>
</code></pre></div></div>

<h2 id="padlocal">Padlocal</h2>

<h3 id="gatewaypadlocal">Gateway(padlocal)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 初始化</span>
<span class="nb">mkdir </span>bot<span class="p">;</span> <span class="nb">cd </span>bot<span class="p">;</span> npm init <span class="nt">-y</span>

npm <span class="nb">install </span>wechaty wechaty-puppet-padlocal // 安装全局报错找不到包
<span class="c"># npm --registry https://registry.npm.taobao.org install wechaty wechaty-puppet-padlocal</span>

<span class="nb">export </span><span class="nv">WECHATY_PUPPET</span><span class="o">=</span><span class="s2">"wechaty-puppet-padlocal"</span>
<span class="nb">export </span><span class="nv">WECHATY_TOKEN</span><span class="o">=</span><span class="s2">"puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>
<span class="c"># get from http://pad-local.com/#/</span>

<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVICE_TOKEN</span><span class="o">=</span><span class="s2">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span>
<span class="c"># export WECHATY_PUPPET_SERVICE_TOKEN="insecure_$(curl -s https://www.uuidgenerator.net/api/version4)"</span>

<span class="nb">export </span><span class="nv">WECHATY_LOG</span><span class="o">=</span><span class="s2">"verbose"</span>
<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVER_PORT</span><span class="o">=</span><span class="s2">"25000"</span>
<span class="nb">export </span><span class="nv">WECHATY_PUPPET_SERVICE_NO_TLS_INSECURE_SERVER</span><span class="o">=</span><span class="nb">true
export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span><span class="s2">/node_modules/.bin"</span> // 这句很重要
wechaty gateway <span class="nt">--puppet</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET</span><span class="k">}</span> <span class="nt">--port</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET_SERVER_PORT</span><span class="k">}</span> <span class="nt">--token</span> <span class="k">${</span><span class="nv">WECHATY_PUPPET_SERVICE_TOKEN</span><span class="k">}</span> <span class="nt">--puppet-token</span> <span class="k">${</span><span class="nv">WECHATY_TOKEN</span><span class="k">}</span>
</code></pre></div></div>

<h3 id="polyglotpadlocal">Polyglot(padlocal)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">puppet</span> <span class="s">"github.com/wechaty/go-wechaty/wechaty-puppet"</span>
<span class="k">var</span> <span class="n">bot</span> <span class="o">=</span> <span class="n">wechaty</span><span class="o">.</span><span class="n">NewWechaty</span><span class="p">(</span><span class="n">wechaty</span><span class="o">.</span><span class="n">WithPuppetOption</span><span class="p">(</span><span class="n">puppet</span><span class="o">.</span><span class="n">Option</span><span class="p">{</span>
    <span class="n">Token</span><span class="o">:</span> <span class="s">"insecure_d6e8b1c7-6fcd-4e32-b3f6-8d1e73388458"</span><span class="p">,</span>
    <span class="n">Endpoint</span><span class="o">:</span> <span class="s">"127.0.0.1:25000"</span><span class="p">,</span>
    <span class="n">Timeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">10</span><span class="p">,</span>
  <span class="p">}))</span>
</code></pre></div></div>

<h2 id="性能对比">性能对比</h2>

<h3 id="gatewayxp">Gateway(xp)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func OnScan<span class="o">(</span>ctx <span class="k">*</span>wechaty.Context<span class="o">)</span> <span class="o">{</span>
    os.exit<span class="o">(</span>0<span class="o">)</span>
<span class="nt">---------------------------------------</span>
➜  <span class="nb">time </span>go run test.go
2022/04/13 22:09:40 PuppetService Start<span class="o">()</span>
2022/04/13 22:09:42 PuppetService onGrpcStreamEvent<span class="o">({</span><span class="nb">type</span>:EVENT_TYPE_HEARTBEAT payload:<span class="o">{</span><span class="s2">"data"</span>:<span class="s2">"Wechaty Puppet gRPC stream connect successfully"</span><span class="o">}})</span>
2022/04/13 22:09:42 PuppetService onGrpcStreamEvent<span class="o">({</span><span class="nb">type</span>:EVENT_TYPE_SCAN payload:<span class="o">{</span><span class="s2">"qrcode"</span>:<span class="s2">"https://login.weixin.qq.com/l/IeJ_ESMXqQ=="</span>,<span class="s2">"status"</span>:2<span class="o">}})</span>
go run test.go  0.46s user 0.32s system 27% cpu 2.895 total
</code></pre></div></div>

<h3 id="typescript">TypeScript</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>onScan<span class="o">(</span>payload: PUPPET.payloads.EventScan<span class="o">)</span> <span class="o">{</span>
    <span class="k">return </span>process.exit<span class="o">(</span>0<span class="o">)</span><span class="p">;</span>
<span class="nt">---------------------------------------</span>
<span class="nb">time </span>cross-env <span class="nv">NODE_OPTIONS</span><span class="o">=</span><span class="s2">"--no-warnings --loader=ts-node/esm"</span> node examples/1.ts
Puppet Version: 0.0.0&lt;1.18.3&gt;
Please wait... I<span class="s1">'m trying to login in...

cross-env NODE_OPTIONS="--no-warnings --loader=ts-node/esm" node examples/1.t  0.40s user 0.13s system 54% cpu 0.975 total
</span></code></pre></div></div>

<p>因为大部分兄弟的微信是不能登录网页版而选的 XP 协议，所以我想说，XP 协议需要 Hook 微信进程，TypeScript 将需要更多的时间</p>

<h2 id="设计思路">设计思路</h2>

<ul>
  <li>Viper 用来读取或者写入配置文件，包括 各种 token</li>
  <li>go func()  // 这里我并不理解这个，我以为他是 后台程序</li>
  <li>strings.Replace 切割 @ 符号和机器人的名字，机器人的名字可以在 onlogin 的时候读取</li>
  <li>在 message 接收到消息的时候，如果匹配到了关键字，其实你可以把它放到后台继续执行的</li>
  <li>还有就是 xp 消息发送过于频繁怕触发微信的风控</li>
  <li>golang 可以使用 air 热重启，typescript 使用 nodemon</li>
</ul>

<h2 id="关于文档贡献">关于文档贡献</h2>

<blockquote>
  <p>如果你喜欢这款开源机器人，且愿意与大家分享你的心得，欢迎投稿
参与投稿，你将获得 长期 <code class="language-plaintext highlighter-rouge">padlocal token</code> ,更稳定！
那么，关于文档，由于文章较多，我的解决方案是 <code class="language-plaintext highlighter-rouge">vscode</code> + <code class="language-plaintext highlighter-rouge">Plug markdownlint</code> + <a href="https://github.com/wechaty/jekyll/blob/main/.markdownlint.json"><code class="language-plaintext highlighter-rouge">markdownlint Config</code></a></p>
</blockquote>]]></content><author><name>ran-xing</name></author><category term="article" /><category term="puppet-xp" /><category term="gateway" /><category term="wechat4u" /><category term="padlocal" /><summary type="html"><![CDATA[前言]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/06-wechaty-gateway-use/logo.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/06-wechaty-gateway-use/logo.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5G消息puppet-walnut的最佳实践-5G智能微秘书</title><link href="https://wechaty.js.org/2022/06/12/wechaty-walnut-aibot/" rel="alternate" type="text/html" title="5G消息puppet-walnut的最佳实践-5G智能微秘书" /><published>2022-06-12T00:00:00+00:00</published><updated>2022-06-12T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/06/12/wechaty-walnut-aibot</id><content type="html" xml:base="https://wechaty.js.org/2022/06/12/wechaty-walnut-aibot/"><![CDATA[<p>很高兴能够以《’启航计划’2022年5G消息开发者马拉松》比赛一等奖获得者的身份来写这篇文章，否则这个5G智能微秘书平台可能无法算上最佳实践了😄。同时也感谢在比赛过程中给我提供建议和指导的李卓桓老师和康嘉老师，还有<code class="language-plaintext highlighter-rouge">puppet-walnut</code>的作者丁生同学。</p>

<h2 id="项目背景">项目背景</h2>

<p>5G消息作为一种新的短信方式，逐渐出现在人们的视野之中。和大部分人一样，第一次看到5G消息，一直不了解它是一个什么样的展示形式，它该怎么应用于现实的生活场景之中，以及我们开发者该怎么进行去对接5G消息。直到看到Wechaty社区
发了一个《’启航计划’2022年5G消息开发者马拉松》比赛通知，我才开始关注起来，原来5G消息是可以直接用Wechaty来对接的，而对接5G消息也有它对应的<code class="language-plaintext highlighter-rouge">puppet-walnut</code>。那我的第一想法就是之前做的<a href="https://wechaty.js.org/2020/05/31/wechaty-web-panel-plugin/">微信版智能微秘书</a>
是不是可以直接对接过来使用呢？</p>

<p>为此我查阅了不少社区资料和<a href="https://www.5g-msg.com/#/">硬核桃官网</a> 介绍，终于把5G消息搞明白了，其实5G消息的另一个名称是RCS融合通信(Rich Communications Services)，它支持文字、图文、视频、红包、位置、联系人、文档、图文卡片等更丰富的内容形式发送。这样看起来的话，和微信很相似，那么对接之前的智能微秘书平台也没有任何问题了，只需要把群组相关的功能去除一部分即可。因为5G消息目前是没有群组的概念，只有联系
人的概念。</p>

<p>那这样一来智能微秘书平台所有的功能都可以完全复用过来，省去了很多开发成本，对接起来也很简单。这一切都得益于Wechaty整体架构的设计，一个新的IM就是一个<code class="language-plaintext highlighter-rouge">puppet</code>，改的是底层<code class="language-plaintext highlighter-rouge">puppet</code>，不变的是业务逻辑和方法，这种方式真的可以给开发者省去很多时间，把大部分时间和关注点放在功能逻辑之上，做一个功能就能适用所有的<code class="language-plaintext highlighter-rouge">puppet</code>。接下来就让我来详细介绍一下5G智能微秘书平台，并且告诉大家如何快速的去实现一个5G智能微秘书。</p>

<h2 id="关于5g智能微秘书平台">关于5G智能微秘书平台</h2>

<p><img src="/assets/2022/06-wechaty-walnut-aibot/web.webp" alt="image" /></p>

<p>5G智能微秘书，是一个基于Wechaty开发的智能对话器人管理平台，和其他单一bot不同的是，我们可以通过这个平台，配置生成出众多不同功能的对话机器人。</p>

<p>它对接了多个智能对话平台来供你选择，来也、天行、图灵、腾讯闲聊等。也内置了用户定时任务、每日提醒、纪念日提醒、当日提醒、定时资讯等众多功能来方便用户使用。</p>

<p>同时添加了素材管理，和openapi功能，可以把5G消息应用在更多的场景之中，使5G消息的发送更为灵活。</p>

<h2 id="功能介绍及演示">功能介绍及演示</h2>

<p>关于5G智能微秘书平台的功能介绍和功能演示，以一段比赛时所提交的的视频来展示</p>

<ul>
  <li>Bilibili: <a href="https://www.bilibili.com/video/BV1RY411M7k9">https://www.bilibili.com/video/BV1RY411M7k9</a></li>
  <li>Youtube: <a href="https://youtu.be/kzg3rZsw2jc">https://youtu.be/kzg3rZsw2jc</a></li>
</ul>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="https://www.youtube.com/embed/kzg3rZsw2jc" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h2 id="如何使用">如何使用</h2>

<h3 id="一获取5g消息平台账号">一、获取5G消息平台账号</h3>

<p>这一步直接参考社区文档<a href="https://wechaty.js.org/2022/04/22/how-to-start-puppet-walnut/">《2022-小白如何从0到1上手puppet-walnut》</a> 即可，讲解的很详细，我这里就不重复说明了。目前非参与比赛的个人开发者是有1个月的体验时间。
如果想拥有更多体验时间，可以参与下个阶段的 <a href="https://mp.weixin.qq.com/s/JSReqEBTuShME0Jzskaiog">《第五届“绽放杯”5G应用征集大赛》</a> ，欢迎大家踊跃参加报名。</p>

<h3 id="二获取5g智能微秘书平台账号">二、获取5G智能微秘书平台账号</h3>

<p>5G智能微秘书平台目前已经发布到公网<a href="http://walnut.aibotk.com/">http://walnut.aibotk.com/</a> ，注册登录后获取个人中心的<code class="language-plaintext highlighter-rouge">APIKEY</code>和<code class="language-plaintext highlighter-rouge">APISECRET</code>备用</p>

<h3 id="三拉取5g智能微秘书客户端代码并安装依赖">三、拉取5G智能微秘书客户端代码并安装依赖</h3>

<p>由于目前还有下个阶段的比赛，所以客户端代码还没有开源出来，大家可以关注这个仓库：<a href="https://github.com/leochen-g/walnut-aibot">https://github.com/leochen-g/walnut-aibot</a> ，下个阶段完赛后会第一时间开源出来，如果想提前体验可以邮箱
联系我。邮箱地址：leo.gengchen@foxmail.com</p>

<blockquote>
  <p>node &gt; 16</p>
</blockquote>

<p>获取客户端后安装依赖</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run <span class="nb">install</span>
</code></pre></div></div>

<h3 id="四配置参数并运行">四、配置参数并运行</h3>

<p>把之前第一步和第二步获得的参数填入到代码中</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">WechatyBuilder</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">wechaty</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">WechatyWebPanelPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./plugin/index</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">bot</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">walnut-aibot</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">bot</span> <span class="o">=</span> <span class="nx">WechatyBuilder</span><span class="p">.</span><span class="nx">build</span><span class="p">({</span>
    <span class="nx">name</span><span class="p">,</span> <span class="c1">// generate xxxx.memory-card.json and save login data for the next login</span>
    <span class="na">puppet</span><span class="p">:</span> <span class="dl">'</span><span class="s1">wechaty-puppet-walnut</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">puppetOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sipId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">****</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// Chatbot的sipId</span>
        <span class="na">appId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">******</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// Chatbot的AppId</span>
        <span class="na">appKey</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*******</span><span class="dl">'</span> <span class="c1">// Chatbot的AppKey</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span>
    <span class="nx">WechatyWebPanelPlugin</span><span class="p">({</span>
        <span class="na">apiKey</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*******</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 微秘书平台apikey</span>
        <span class="na">apiSecret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*******</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 微秘书平台apisecret</span>
    <span class="p">})</span>
<span class="p">)</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span>
</code></pre></div></div>

<p>开始运行</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run start
</code></pre></div></div>

<p>接下来就是手机端可以与5G智能微秘书进行对话了。</p>

<h2 id="答辩文稿">答辩文稿</h2>

<p>分享一下答辩时的文稿，可以让大家更清楚的了解5G智能微秘书是怎样一个平台</p>

<div style="
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="/assets/js/viewer-js/#/assets/2022/06-wechaty-walnut-aibot/walnut-share.pdf" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<h2 id="关于绽放杯">关于绽放杯</h2>

<p>最后，新的一期5G应用征集大赛也要开始了，欢迎对5G消息有兴趣的开发者参与进来。这是首次绽放杯对个人开发者进行开放，而且奖项丰厚，属于国家级赛事，含金量很高的，赶快报名参加吧。</p>

<p>由工业和信息化部主办，中国信息通信研究院联合5G应用产业方阵、IMT-2020(5G)推进组、中国通信标准化协会以及金砖国家未来网络研究院中国分院共同承办的第五届“绽放杯”5G应用征集大赛已于2022年4月28日正式启动，本届大赛以“5G赋能数字化 扬帆助力新征程”为主题，聚焦行业数字化转型升级、个人应用创新发展、社会数字化公共服务能力提升等重点方向，加速 5G 应用从“样板间”向“商品房”转变，推动5G应用规模化发展。</p>

<p><a href="https://mp.weixin.qq.com/s/JSReqEBTuShME0Jzskaiog">更多介绍及参赛方式</a></p>]]></content><author><name>leochen-g</name></author><category term="article" /><category term="code" /><category term="puppet-walnut" /><category term="news" /><summary type="html"><![CDATA[很高兴能够以《’启航计划’2022年5G消息开发者马拉松》比赛一等奖获得者的身份来写这篇文章，否则这个5G智能微秘书平台可能无法算上最佳实践了😄。同时也感谢在比赛过程中给我提供建议和指导的李卓桓老师和康嘉老师，还有puppet-walnut的作者丁生同学。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/06-wechaty-walnut-aibot/walnut-aibot.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/06-wechaty-walnut-aibot/walnut-aibot.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">开源之夏 - IM 应用消息聚合</title><link href="https://wechaty.js.org/2022/06/05/summer-code-im-aggregation/" rel="alternate" type="text/html" title="开源之夏 - IM 应用消息聚合" /><published>2022-06-05T00:00:00+00:00</published><updated>2022-06-05T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/06/05/summer-code-im-aggregation</id><content type="html" xml:base="https://wechaty.js.org/2022/06/05/summer-code-im-aggregation/"><![CDATA[<p>如今，社交应用的种类日渐丰富，每个人每天都会面对海量的信息，而注意力和时间是有限的，频繁地在各个社交平台上浏览、查阅、回复消息会消耗大量的精力。为了提升工作效率，减少无效信息的干扰，我们希望能够聚合不同 IM 应用（例如微信，企业微信和 WhatsApp）的消息，并在每天的固定时间点转发上一个周期内的所有消息到指定应用。</p>

<h2 id="im-消息聚合应用功能概览">IM 消息聚合应用功能概览</h2>

<h3 id="通过-wechaty-对接微信企业微信whatsapp">通过 Wechaty 对接微信、企业微信、WhatsApp</h3>

<ul>
  <li>
    <p>利用 Wechaty 的能力实现这三类社交 APP 基础类型消息的收发功能</p>

    <ul>
      <li>文字消息</li>
      <li>图片消息</li>
      <li>文件消息</li>
      <li>动态表情</li>
      <li>卡片链接</li>
    </ul>
  </li>
</ul>

<h3 id="以上三者应用间的消息实现互通">以上三者应用间的消息实现互通</h3>

<ul>
  <li>通过消息的转发调度方案，使得企业微信和 WhatsApp 的消息可以汇总到微信上</li>
  <li>消息同步：同步其他应用的消息</li>
</ul>

<h3 id="支持分时间段选择接收消息的社交软件">支持分时间段选择接收消息的社交软件</h3>

<ul>
  <li>支持通过配置来选择任一社交软件来作为消息的汇总应用、选择接收消息的时间等。</li>
  <li>支持用 docker 快速部署项目</li>
  <li>支持更多的 IM 应用</li>
  <li>支持拓展第三方应用，接入机器人，天气查询之类的应用</li>
</ul>

<h2 id="消息转发调度">消息转发调度</h2>

<p>到达某个用户指定的时间点后，消息聚合应用自动从存储池中拉取历史消息并转发到汇总应用。</p>

<p>其转发调度的大致流程如下。</p>

<p><img src="/assets/2022/06-summer-code-im-aggregation/1.webp" alt="消息转发调度的流程" /></p>

<p>为了保障用户的隐私信息，原则上消息聚合应用应该默认在转发之后删除原本存储的消息。</p>

<p>为了增强该部分的可用性，可以对消息进行针对性的过滤和处理。</p>

<p>例如当应用接收到某些触发了设定好的规则的信息：</p>

<ol>
  <li>@我的消息</li>
  <li>正则表达式匹配成功的消息</li>
  <li>指定群聊的消息</li>
  <li>指定好友发送的消息</li>
  <li>特定类别的消息（图片，链接，动画表情等）</li>
</ol>

<p>那么就可以进行一些自定义的操作，例如：</p>

<ol>
  <li>发送指定的网络请求</li>
  <li>转发消息给某个指定用户</li>
  <li>给指定邮件地址发送邮件</li>
</ol>

<p>在转发消息到汇总应用的时候，需要额外发送一条消息来告知用户接下来转发的消息是来自哪个社交应用，例如（以下内容发送自微信）。</p>

<h2 id="项目配置">项目配置</h2>

<p>为了让用户体验更加一致，也为了避免在启动 docker 服务之后繁琐的配置，用户应通过微信对话式的交互操作来配置消息聚合应用，我们期望可以实现如下功能的配置：</p>

<ol>
  <li>汇总应用</li>
  <li>消息转发的时间（可以是一个序列，多个时间）</li>
  <li>白名单机制（正则表达式，消息类型，@我等多条件组合）</li>
  <li>黑名单机制</li>
  <li>关键字触发后的操作</li>
  <li>清空消息池</li>
  <li>通过交互式命令暂停消息转发</li>
  <li>通过交互式操作重新启动消息转发</li>
</ol>

<p><img src="/assets/2022/06-summer-code-im-aggregation/2.webp" alt="交互式操作" /></p>

<p>除上述配置相关的内容以外，该交互式操作还应该支持：</p>

<ol>
  <li>查询应用状态，如应用是否正在运行，消息池内有多少条消息。</li>
  <li>查询其他几个社交应用账号是否在线。</li>
</ol>

<h2 id="拓展">拓展</h2>

<h3 id="多im应用接入">多IM应用接入</h3>

<p>本应用应该设计一组完善的接口，方便开发者和使用者接入更多的 IM 应用，例如 Telegram，QQ 等。Wechaty 社区已经适配了很多 IM 应用，我们可以对这些应用进行一个简单的适配，例如开发一个 adapter 层来统一 puppet 和消息聚合应用之间数据通信。</p>

<p><img src="/assets/2022/06-summer-code-im-aggregation/4.webp" alt="消息聚合应用架构设计" /></p>

<h3 id="第三方应用接入">第三方应用接入</h3>

<p>为了增强项目的可玩性和拓展性，可以引入一个插件框架，应用在生命周期内向插件暴露几个 hook 函数，方便第三方开发者开发应用嵌入到消息聚合的流程中。</p>

<p>hook 大致可以分为这么几类：</p>

<ol>
  <li>项目启动</li>
  <li>接收消息</li>
  <li>向汇总应用转发消息</li>
  <li>接收来自用户的指令</li>
</ol>

<p>如下图所示，当消息聚合应用启动的时候，会触发所有注册了“启动成功” hook 的拓展的回调函数，在接收到 IM 消息的时候也会触发所有注册了“接收消息” hook 的拓展的回调函数， 其他几项都是差不多的逻辑。</p>

<p><img src="/assets/2022/06-summer-code-im-aggregation/3.webp" alt="生命周期事件" /></p>

<p>部分触发关键字的消息会被发送到第三方应用：</p>

<p><img src="/assets/2022/06-summer-code-im-aggregation/5.webp" alt="交互式命令事件" /></p>

<h2 id="docker-镜像打包">docker 镜像打包</h2>

<p>我们计划使用 docker 集成项目所需要的运行环境，方便用户在自己的机器或者服务器上快速部署 IM 消息聚合项目。</p>

<p>docker 的相关文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a>。</p>

<hr />

<h2 id="小结">小结</h2>

<p>我自去年使用过 Wechaty 之后就一直有关注 Wechaty 的动向，想着来年考研结束后可以做一波 Wechaty 的<a href="https://summer-ospp.ac.cn/#/org/prodetail/220260301">开源之夏</a>项目。好巧不巧，今年也给我蹲到了，所以就很有幸能够参与进来。</p>

<p>本项目计划在六月底七月初正式开始施工，按照上文所写的工作量，差不多一个月就可以做出粗略的成品，八月左右开始进行完善和测试工作，并编写相关文档。</p>]]></content><author><name>tanknee</name></author><category term="project" /><category term="summer-code" /><category term="puppet-whatsapp" /><category term="productivity" /><summary type="html"><![CDATA[如今，社交应用的种类日渐丰富，每个人每天都会面对海量的信息，而注意力和时间是有限的，频繁地在各个社交平台上浏览、查阅、回复消息会消耗大量的精力。为了提升工作效率，减少无效信息的干扰，我们希望能够聚合不同 IM 应用（例如微信，企业微信和 WhatsApp）的消息，并在每天的固定时间点转发上一个周期内的所有消息到指定应用。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/06-summer-code-im-aggregation/title.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/06-summer-code-im-aggregation/title.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Wechaty助力唐僧念经和佛祖踢球</title><link href="https://wechaty.js.org/2022/05/26/wechaty-help-organize-football-activity/" rel="alternate" type="text/html" title="Wechaty助力唐僧念经和佛祖踢球" /><published>2022-05-26T00:00:00+00:00</published><updated>2022-05-26T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/05/26/wechaty-help-organize-football-activity</id><content type="html" xml:base="https://wechaty.js.org/2022/05/26/wechaty-help-organize-football-activity/"><![CDATA[<h2 id="wechaty助力唐僧念经和佛祖踢球">Wechaty助力唐僧念经和佛祖踢球</h2>

<h3 id="组织活动的小烦恼">组织活动的小烦恼</h3>

<p>组织过足球篮球等活动的朋友，都难免遇到一个小小烦恼:报名的球星不够不成局，报太多又不好安排上场时间。</p>

<p>之前在冬天组织足球活动时，人够了就好，其他球星算不准时间的则随时欢迎。
有球星很后面才过来，还不好意思地和我说没及时报名。
我笑着说没事没事，冬天球星多多益善嘛。</p>

<p>自己这么想这么操作，在其他队踢有时有事没法及时报名，强插去玩被提醒“这样不好，让组织者”为难。
所以己之所欲也要问清楚了才能施于人。</p>

<p>我们最常玩的球队领导比较多，领导忙起来也经常没法及时报名。
有次看着快开赛了人还不足，一急之下人家是急中生智，我那次居然急中生想佛祖的心，说到:“哪天我要拉佛祖进群，并说:佛祖同志您好，请积极报名，不然怎么保佑大家不受伤。”</p>

<p><img src="/assets/2022/05-wechaty-help-organize-football-activity/fozujinqun.webp" alt="佛祖报名踢球" /></p>

<h3 id="请佛祖和唐僧师父">请佛祖和唐僧师父</h3>

<p>第二天我忽然想起来，真可以考虑拉佛祖进群，群里讨论佛祖喜欢的话题时，佛祖就出来念经之类的。
一念起，万计生。
去哪请佛祖大驾，怎么请，怎么不过份打扰大家等等，一个个问题纷至沓来。</p>

<p>鉴于队长说过佛祖太高大上他怕hold不住，就改成请唐僧师父好了。</p>

<p><img src="/assets/2022/05-wechaty-help-organize-football-activity/tangseng.webp" alt="唐僧师父" /></p>

<p>于是一通操作，找到了Wechaty，把唐僧师父请进了我们足球群。</p>

<h3 id="wechaty助力">wechaty助力</h3>

<p>踢球这么开心幸福的事情，最重要的是怎么避免伤病保证经常可以踢。
于是伤病问题是佛祖或唐僧师父最关心的话题。</p>

<p>有球星讨论脚踝扭伤或膝伤，唐僧师父念:
<a href="https://mp.weixin.qq.com/s/6OvreXJz3UFwuTPqb-2Lug">盘腿治膝伤</a></p>

<p>有球星讨论膝盖半月板，唐僧师父念:
<a href="https://mp.weixin.qq.com/s/JH234VpbQmW23NcBduZbJA">鼓楼医院关节科不错</a></p>

<p>足球群，当然足球相关话题也是师父喜欢的:
有讨论齐达内等球星，师父就念:
<a href="https://mp.weixin.qq.com/s/wq5M7busUmL8h1skLPuJ5Q">球场师徒缘</a></p>

<p>说起苏亚雷斯，师父念:
<a href="https://mp.weixin.qq.com/s/PC18UGOs5YxZrhvCDI_IMw">从苏牙到苏神</a></p>

<p>讨论多素少肉等提高体力的事，师父就念:
<a href="https://mp.weixin.qq.com/s/GrzkWiLmHuIutIshT4evWA">红楼梦最俊美的女子为何要吃斋?</a></p>

<p><img src="/assets/2022/05-wechaty-help-organize-football-activity/dazuokangfu.webp" alt="打坐康复" /></p>

<p>话说回来，虽然佛祖唐僧师父等等苦心孤诣想告诉大家避免伤病的好心态，以及万一伤了怎么早点康复，但是要有机会出来念经，还是得好好感谢Wechaty这个工具:</p>

<p>详见python-wechaty官网文档。传送门<a href="https://wechaty.readthedocs.io/zh_CN/latest/introduction/use-padlocal-protocol/">python-wechaty文档</a></p>]]></content><author><name>circlestriker</name></author><category term="article" /><category term="ai" /><summary type="html"><![CDATA[Wechaty助力唐僧念经和佛祖踢球]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/05-wechaty-help-organize-football-activity/fozujinqun.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/05-wechaty-help-organize-football-activity/fozujinqun.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">同心助力，战役有AI!</title><link href="https://wechaty.js.org/2022/05/20/wechaty-ai-antigenbot/" rel="alternate" type="text/html" title="同心助力，战役有AI!" /><published>2022-05-20T00:00:00+00:00</published><updated>2022-05-20T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/05/20/wechaty-ai-antigenbot</id><content type="html" xml:base="https://wechaty.js.org/2022/05/20/wechaty-ai-antigenbot/"><![CDATA[<p>2022年5月9日，上海闵行区政府从防控机制、防控措施和防控成效等方面对“无疫小区”申请名单的充分论证，公布了首批“无疫小区”名单，“嘉怡水岸睿府“赫然在列。嘉怡水岸睿府小区的抗疫成效卓然，
分析其取得阶段性胜利的原因，离不开居民区党支部、居委会坚守阵地毫不松懈；离不开楼栋自治，保障楼道里的“最后一百米”；离不开团购报备制度，涉疫信息的透明度，更得益于看不见的人工智能“硬核”技术的加持–永不疲倦的 <strong>“AI抗疫机器人”</strong>。</p>

<h2 id="小荷才露尖尖角">小荷才露尖尖角</h2>

<p>疫情初期，整个小区对疫情静态管理的经验不足，导致居民团购混乱无序，物资到达后运力紧张，志愿者配送路线无法追溯，居委会和志愿者的工作压力急剧上升，时有物资错发、漏发，以及搞错阳性楼栋的问题。由于人工调度的固有属性可能降低社区治理的效率，4月初，嘉怡水岸小区志愿者在微信群里展开激烈的讨论和思辩，提出楼栋自治的方案。然而在效率提升和误差消除方面仍然莫衷一是。</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/augyv-hwwkr.webp" alt="img" /></p>

<p>（志愿者们在小区外分拣物资）</p>

<p>不负韶华，在青春的赛道上奋力奔跑。为了解决这些困难，年轻的小区志愿者吴光正、凌思凯、李思颖，作为小区的一份子，决心发挥专长，从技术的角度来解决小区面临的困境。三位 IT 领域的青年志愿者，在繁重的工作结束后的夜晚，熬夜讨论系统设计架构，尝试以最快最有效的方式搭建起一套解放人力的物资调度配送系统。仅仅2个晚上，物资配送系统搭建成功。这个系统在帮助居委会自动处理物资团购信息、快速制作定制化的表单方面，发挥了积极的作用。</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/avzr0-npy78.webp" alt="img" /></p>

<p>（志愿者们拿着处理好的物资配送表单派送中）</p>

<h2 id="携一颗玲珑心且行且从容">携一颗玲珑心，且行且从容</h2>

<p>系统成功地服务小区后，程序员志愿者们想做得更多。他们试图寻求一个解决方案，以极低的学习成本将居委会和志愿者们从繁杂而重复的事务中解放出来，有时间去思考更重要的事情，消弭未来可能出现的危机。
同舟共济、团结一心，咬定青山不放松。Wechaty社区贡献者吴京京（wj-Mcat）和赵泽明（bigbrother）的加入让嘉怡水岸小区志愿者们的设想成为可能。基于 python-wechaty 开发的 AI 抗疫机器人项目 AntigenBot 诞生了！这个系统不仅将最初开发的物资配送系统融入机器人体系，还开发了消息多功能转发插件，助力嘉怡水岸的居委会工作人员与小区居民并肩战疫。
与病毒赛跑的脚步永不停歇。 Wechaty 社区联合飞桨社区志愿者和开源社区的志愿者，在系统插件的开发上与病毒赛跑。基于PaddleDetection和PaddleOCR开发抗原图片检测功能以及各地健康码识别功能，也于近期部署上线，可以说是非常实用了。
目前AI 抗疫机器人在嘉怡水岸小区稳定运行了一个月，获得了居委会和居民们的一致好评。</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/ay0xw-gh4nt.webp" alt="img" /></p>

<p>（居委会工作人员与志愿者们一起配送物资）</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/an3j3-lw6f4.webp" alt="img" /></p>

<p>（蒋书记与志愿者们一起讨论抗疫工作）</p>

<p>嘉怡水岸小区居委会蒋书记表示：“整套系统从开发、调试、磨合、正式运行短短的几天，让居委会在民生保障工作有了质的飞跃，大大降低了居委会的人力和时间成本，有更多的时间和精力去做好疫情防控工作。”</p>

<h2 id="ai抗疫机器人功能模块说明">AI抗疫机器人功能模块说明</h2>

<h3 id="团购配送模块">团购配送模块</h3>

<p><strong>应用场景：</strong> 居委会从多个渠道收到一定数量的团购清单，物资到达后需要按照清单上的楼栋和门牌号派送给业主</p>

<p><strong>功能描述：</strong> 居委会管理员只需将团购清单文件发送给机器人，其将会自动解析地址格式，一秒生成对应配送文件，实现精准配送。</p>

<p><strong>开发志愿者：</strong> 吴光正，刘通</p>

<h3 id="消息多功能转发模块">消息多功能转发模块</h3>

<p><strong>应用场景：</strong> 居委会定时/不定时向所管理的小区楼栋群发布政府通知、团购信息和重要消息等。</p>

<p><strong>功能描述：</strong> 居委会管理员只需向机器人发送消息内容（文字/图片/小程序等），内容将会在一定时间段内将消息转发给所有指定楼栋群，支持定时转发、延迟转发、授权转发。</p>

<p><strong>开发志愿者：</strong> 吴京京，赵泽明 （来自 Wechaty 社区）</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/a1ett-6rr3x.webp" alt="img" /></p>

<p><a href="https://github.com/ShanghaiITVolunteer/AntigenWechatBot">模块详情</a></p>

<h3 id="抗原图片分析模块">抗原图片分析模块</h3>

<p><strong>应用场景：</strong> 基于深度学习的AI抗原识别，助力社区实现风险的高效自查</p>

<p><strong>功能描述：</strong> 机器人提醒业主进行抗原检测，并分析是否有漏发、重发等行为，最终将所有数据整理成Excel数据和图片压缩包数据，自动上传到规定的平台。</p>

<p><strong>开发志愿者：</strong> 刘建建、马赫、韩鹏远（来自飞桨社区）</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/a3vh5-c3zmu.webp" alt="img" /></p>

<p><a href="https://github.com/ShanghaiITVolunteer/AntigenWechatBot/issues/44">模块详情</a></p>

<p>在项目开发的过程中，青年志愿者更希望守护公民的数据隐私，特邀开源社法律顾问委员会，海华永泰律师事务所的陈元熹律师，作为项目的法律指导，Wechaty 开源项目作者李卓桓老师和开源社理事庄表伟老师作为项目技术顾问，为项目出谋划策。
AI 抗疫机器人AntigenBot 项目在嘉怡水岸小区抗疫工作流程的基础上，通过第一性原理简化方法，提升效率，规避风险。经过一系列的优化提升，负责机器人方面的社区的管理人员可以实现“开箱即用”、“一看就懂”的使用方法。</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/aa0nw-g84t1.webp" alt="img" /></p>

<p>（项目UI界面原型）</p>

<p>最后，借用该项目的发起人之一吴光正同学的话来说：“这个bot 的目的不是用冷冰冰的机器来取代基层工作者和人民之间的联系。与之相反，我们旨在将基层工作者从重复、繁杂、琐碎的工作中解放出来，让他们更有动力去深入了解人民的高层次需求，以建立更温暖更友善的联系，并更好的服务于人民，建立鱼水情。我相信，只有增强这种联系，我们上海才能共同努力，一起克服这如洪水猛兽般的疫情！”</p>

<p>（满屏的感谢）</p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/arjkv-k9fni.webp" alt="img" /></p>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/a2izi-ehkxh.webp" alt="img" /></p>

<p>（嘉怡水岸小区居委会和居民并肩战役）</p>

<h2 id="力所能及义不容辞">力所能及，义不容辞</h2>

<p>其实，该项目还有一个分支项目待投入使用，就是Wechaty 社区贡献者 luyuchao（超哥）领衔开发的 wechat QA 问答机器人– 专门针对社群工作者，拼团团长，业务群运营经理，帮助他们解决重复性问答的问题（<a href="https://github.com/choogoo/wechat-openai-qa-bot">项目传送门</a>）。可以说AI机器人插件的开发是无限的，使用的场景是可扩展的，这个项目的意义显而易见。
我们还认为，微信虽然是一个封闭的系统，但是基于基层组织与群众联系的快捷工具微信做一些工具类的开发在目前的疫情形势下是必然之举。就算在疫情后期和疫情结束，我们的AI 抗疫机器人项目也可以继续发挥它的作用，转变为AI 社区助理机器人，用科学的管理工具帮助基层工作者处理信息化相关的事务。
另一方面对于AI产业来说，虽然过去数年我国在科研方面有长足的进步，学术论文和实验室成果都已经处于世界前列，但是在具体的产业落地方面，整体渗透率尚不足5%……本轮疫情重压之下，基层社区作为政府治理的“末梢神经”暴露出很多的问题，这些问题必将是未来需要加强投入进行提升的地方，同时对于AI产业而言，这也必将是宝贵的落地场景，正如伽利略的名言——“科学的唯一目的是减轻人类生存的苦难“。</p>

<h2 id="致谢">致谢</h2>

<p><strong>嘉怡水岸志愿者团队：</strong> 吴光正，刘通，李思颖，凌思凯</p>

<p><strong>Wechaty社区团队：</strong> 李卓桓，吴京京，赵泽明，luyuchao，Padlocal好大</p>

<p><strong>开源社：</strong> 陈元熹，庄表伟，李思颖</p>

<p><strong>飞桨社区团队：</strong> 飞桨运营飞飞，刘建建，马赫，韩鹏远</p>

<h2 id="社区介绍">社区介绍</h2>

<h3 id="wechaty-社区">Wechaty 社区</h3>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/logo.webp" alt="img" /></p>

<p>Wechaty is a Conversational RPA SDK for chatbot makers. With only 6 lines of code, you can create a bot on the most popular IMs like WeChat, Whatsapp, WeCom, Gitter, etc.</p>

<h3 id="开源社">开源社</h3>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/aa8zj-zyze7.webp" alt="img" /></p>

<p>开源社成立于 2014 年，是由志愿贡献于开源事业的个人成员，依 “贡献、共识、共治” 原则所组成，始终维持厂商中立、公益、非营利的特点，是最早以 “开源治理、国际接轨、社区发展、开源项目” 为使命的开源社区联合体。开源社积极与支持开源的社区、企业以及政府相关单位紧密合作，以 “立足中国、贡献全球” 为愿景，旨在共创健康可持续发展的开源生态，推动中国开源社区成为全球开源体系的积极参与及贡献者。</p>

<h3 id="飞桨社区">飞桨社区</h3>

<p><img src="/assets/2022/05-wechaty-ai-antigenbot/adt2z-wdcvt.webp" alt="img" /></p>

<p>作为中国首个自主研发、功能丰富、开源开放的产业级深度学习平台，百度飞桨于2016年正式开源，当前飞桨平台汇聚了超过400万开发者，助力企业单位、高等院校、科研机构的AI开发者提升模型开发效率与体验、推动AI技术在各行业的实际落地与应用。AI Studio是基于百度深度学习平台飞桨的人工智能学习与实训社区，提供在线编程环境、免费GPU算力、海量实训项目和开放数据，帮助开发者快速创建和部署模型。</p>

<p>bigbrother on behalf of the <a href="https://github.com/ShanghaiITVolunteer">ShanghaiITVolunteer</a></p>]]></content><author><name>bigbrother666sh</name></author><category term="article" /><category term="ai" /><category term="antigen" /><summary type="html"><![CDATA[2022年5月9日，上海闵行区政府从防控机制、防控措施和防控成效等方面对“无疫小区”申请名单的充分论证，公布了首批“无疫小区”名单，“嘉怡水岸睿府“赫然在列。嘉怡水岸睿府小区的抗疫成效卓然， 分析其取得阶段性胜利的原因，离不开居民区党支部、居委会坚守阵地毫不松懈；离不开楼栋自治，保障楼道里的“最后一百米”；离不开团购报备制度，涉疫信息的透明度，更得益于看不见的人工智能“硬核”技术的加持–永不疲倦的 “AI抗疫机器人”。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/05-wechaty-ai-antigenbot/a1fup-y7cpd.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/05-wechaty-ai-antigenbot/a1fup-y7cpd.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022-关于开发wechaty-huggingface-pipeline的提议</title><link href="https://wechaty.js.org/2022/05/05/wechaty-huggingface-proposal/" rel="alternate" type="text/html" title="2022-关于开发wechaty-huggingface-pipeline的提议" /><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>https://wechaty.js.org/2022/05/05/wechaty-huggingface-proposal</id><content type="html" xml:base="https://wechaty.js.org/2022/05/05/wechaty-huggingface-proposal/"><![CDATA[<h2 id="关于开发wechaty-huggingface-pipeline的提议">关于开发wechaty-huggingface-pipeline的提议</h2>

<h3 id="一huggingface是什么">一、huggingface是什么</h3>

<ul>
  <li>
    <p>一个一键化傻瓜化的NLP模型平台</p>
  </li>
  <li>
    <p>支持16+的NLP（自然语言处理）任务，包括对话系统、自动摘要、文本分类、情感分析</p>
  </li>
</ul>

<p><img src="/assets/2022/05-wechaty-huggingface-proposal/huggingface1.webp" alt="img" /></p>

<ul>
  <li>支持36000+的AI训练好的预训练模型，包括中文预训练模型</li>
</ul>

<p><img src="/assets/2022/05-wechaty-huggingface-proposal/huggingface2.webp" alt="img" /></p>

<h3 id="二wechaty社区为什么需要huggingface的nlp能力">二、Wechaty社区为什么需要huggingface的NLP能力？</h3>

<ul>
  <li>可以让对话机器人更智能，更好玩，比如这个AI剧本杀：</li>
  <li><a href="https://wechaty.js.org/2022/03/31/shezhang-bujian-le/">https://wechaty.js.org/2022/03/31/shezhang-bujian-le/</a></li>
  <li>而huggingface接口可以让用户傻瓜化地使用这些AI模型</li>
</ul>

<h3 id="三可能的实现方式">三、可能的实现方式</h3>

<ul>
  <li>做一个插件，包装huggingface pipeline的API</li>
  <li>huggingface的API非常简单，第一步选择任务text-generation</li>
  <li>第二步直接输入一句话，模型就会回复了。</li>
  <li>其中pipeline有一个可选参数是model_card，可以去选择用model_hub中哪一个模型</li>
</ul>

<p><img src="/assets/2022/05-wechaty-huggingface-proposal/huggingface3.webp" alt="img" /></p>

<h3 id="四智能问答的机器人最终效果是怎么样的">四、智能问答的机器人最终效果是怎么样的？</h3>

<ul>
  <li>可以参考本段视频：<a href="https://www.bilibili.com/video/BV1G3411p7Us">https://www.bilibili.com/video/BV1G3411p7Us</a></li>
</ul>

<div style="
    position: relative;
    padding-bottom: 70%;
    padding-top:30px;
    height:0;
    overflow:hidden;
">
  <iframe src="//player.bilibili.com/player.html?aid=425000021&amp;bvid=BV1G3411p7Us&amp;cid=559010604&amp;page=1&amp;high_quality=1" allowfullscreen="" webkitallowfullscreen="" frameborder="0" style="
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    ">
</iframe>

</div>

<ul>
  <li>这个机器人已经使用了huggingface pipeline，只是没有接入wechaty</li>
  <li>主要功能有：智能客服（只能匹配客服问题库最相近的问题）、差评自动分类识别</li>
</ul>

<h3 id="五api是去请求调用huggingface服务器还是可以下载模型本地运算">五、API是去请求调用huggingface服务器还是可以下载模型本地运算</h3>

<ul>
  <li>模型是下载到本地的，不依赖付费API，当然也可以用他给的API</li>
</ul>

<h3 id="六机器人运行的机器需要gpu吗">六、机器人运行的机器需要GPU吗？</h3>

<ul>
  <li>可以GPU推理，也可以CPU，CPU推理速度也很快</li>
</ul>]]></content><author><name>anaivebird</name></author><category term="project" /><category term="plugin" /><category term="chatbot" /><category term="ecosystem" /><summary type="html"><![CDATA[关于开发wechaty-huggingface-pipeline的提议]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2022/05-wechaty-huggingface-proposal/huggingface_title.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2022/05-wechaty-huggingface-proposal/huggingface_title.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>